
Cloudflare Workersにおけるシークレット管理の習得：Cloudflare Secrets Store決定版ガイド


I. エグゼクティブサマリー


導入

新しいCloudflare Secrets StoreをCloudflare Workersに導入する過程で、多くの開発者が混乱と課題に直面しています。特に、CI/CDパイプラインにおける認証エラー、従来のWorkers Secretsとの概念的な混同、そしてwrangler.toml設定ファイルやWorkerコード内での不正確な実装が、プロジェクトの進行を妨げる主な要因となっています。これらの問題は、新しいテクノロジーを採用する際によく見られるものですが、正確で体系的な情報が不足している場合に顕著になります。
本レポートは、これらの課題を解決するための包括的かつ実践的なガイドとして作成されました。Cloudflareのシークレット管理エコシステム全体を解き明かし、Cloudflare Secrets Storeをセキュアかつ効率的に活用するための明確な道筋を示します。読者は、直面している具体的なエラーを解決するだけでなく、将来のすべてのWorkersプロジェクトにおいて、スケーラブルで保守性の高いシークレット管理戦略を設計・実装するための専門知識を習得することを目的とします。

ソリューションの概要

本レポートでは、ユーザーが直面している問題を解決するために、以下の主要なソリューションを詳細に解説します。
概念の整理と比較分析: Cloudflareが提供する複数のシークレット管理システム（従来のWorkers Secrets、新しいSecrets Store、CI/CD環境のシークレット、ローカル開発用の.dev.vars）の役割と目的を明確に区別し、それぞれのユースケースを体系的に整理します。これにより、技術選定における混乱を根本から解消します。
実装の標準化: wrangler.tomlの正確な構文と、Workerコードからシークレットにアクセスするための堅牢なパターンを提示します。これには、本番環境とローカル開発環境の両方でシームレスに機能する、実用的なコード例が含まれます。
CI/CD認証エラー（code: 10021）の解決: デプロイを妨げている認証エラーの根本原因を正確に診断し、CI/CDパイプラインで使用するAPIトークンに必要な最小限の権限を特定します。これにより、セキュアで自動化されたデプロイプロセスを確立します。
高度な戦略とベストプラクティス: ステージング環境と本番環境を分離して管理する方法、Secrets Storeのセキュリティアーキテクチャの理解、そして現在オープンベータ版であるサービスの制限事項を乗り越えるための戦略など、より高度なトピックについても深く掘り下げます。

最終的な成果

本ガイドに従うことで、ユーザーは現在直面している実装上の障壁を取り除くだけでなく、Cloudflareの最新のベストプラクティスに基づいた、セキュアでスケーラブルなシークレット管理の専門家としての知見を得ることができます。最終的には、Cloudflare Workersの能力を最大限に引き出し、より堅牢で信頼性の高いサーバーレスアプリケーションを構築するための確固たる基盤を築くことができるでしょう。

II. Cloudflareにおける現代のシークレット管理：基礎分析

Cloudflare Secrets Storeの導入における混乱の多くは、Cloudflareエコシステム内に存在する複数のシークレット管理メカニズムの役割と目的が混同されていることに起因します。これらのシステムは互いに競合するものではなく、開発ライフサイクルの異なる段階で特定の目的を果たす、補完的なツールです。このセクションでは、各システムを体系的に解き明かし、その違いと適切な使用法を明確にします。

Cloudflareにおけるシークレットの進化

Cloudflareのシークレット管理機能は、プラットフォームの成熟とともに進化してきました。その歴史を理解することは、各システムの設計思想を把握する上で重要です。
当初、シークレット管理はwrangler secret putコマンドで操作される、シンプルな機能として提供されました 1。これは「従来のWorkers Secrets」として知られ、各シークレットが単一のWorkerスクリプトに密接に結びつく「Per-Worker」スコープを持っていました。このモデルは、自己完結型の小規模プロジェクトには十分でしたが、アプリケーションがより複雑で分散的になるにつれて、いくつかの課題が浮上しました 3。
主な課題は、複数のWorkerで同じAPIキーなどの認証情報を共有する必要がある場合、そのシークレットを各Workerに対して個別に作成・更新しなければならない点でした 3。これにより、シークレットの重複が発生し、キーローテーション（定期的なキーの更新）のような基本的なセキュリティプラクティスを、一貫性を保ちながら実施することが非常に困難になりました 3。さらに、Workerのデプロイ権限を持つ開発者なら誰でもシークレットを変更できてしまうため、より詳細なアクセス制御（RBAC）の必要性も高まりました 3。
これらの課題を解決するために開発されたのが、Cloudflare Secrets Storeです。これは、シークレットをアカウントレベルで一元管理するための戦略的な進化形であり、複数のWorker間でのシークレット共有を容易にし、セキュリティ管理者と開発者の役割を分離するためのきめ細やかなRBACを導入しています 3。したがって、Secrets Storeは単なる代替品ではなく、Cloudflareプラットフォームがエンタープライズレベルのスケーラビリティとセキュリティ要件に対応するための、必然的な次の一歩と言えます。

概念の深掘り：比較分析

開発ライフサイクルにおける4つの主要なシークレット管理システムを、その目的と機能に基づいて比較します。

1. 従来のWorkers Secrets

スコープ: Per-Worker（Workerごと）。シークレットは、特定の1つのWorkerスクリプトにのみ所属します 1。
管理方法: wrangler secret CLIコマンド（put, delete, list）またはCloudflareダッシュボードの各Workerの「設定」タブから管理します 1。
コードからのアクセス: Workerコード内でenv.SECRET_NAMEのように、同期的に単純な文字列として直接アクセスできます 1。
ユースケース: 単純なプロジェクト、特定のWorkerに固有のシークレット、または密結合したシークレット管理のシンプルさを好む場合に適しています。

2. Cloudflare Secrets Store（ベータ版）

スコープ: Account-Level（アカウントレベル）。シークレットは中央集権的なストアに保存され、アカウント内の任意の数のWorkerにバインド（紐付け）できます 3。
管理方法: wrangler secrets-store CLIコマンド、またはダッシュボードのアカウントホームにある専用の「Secrets Store」セクションから管理します 3。
コードからのアクセス: 非同期アクセスが必要です。env.BINDING_NAMEは文字列ではなくオブジェクトであり、await env.BINDING_NAME.get()メソッドを呼び出して値を取得する必要があります 8。
ユースケース: 複数のサービス間で共有されるシークレット、セキュリティ管理者と開発者の職務分掌が必要な組織、スケーラブルなマイクロサービスアーキテクチャの構築に推奨されるアプローチです 3。

3. CI/CD Secrets（例：GitHub Actions Secrets）

スコープ: Cloudflare外部。GitHub ActionsやGitLab CI/CDなどのCI/CDプラットフォームに固有です。
目的: Workerランタイムに渡されるのではなく、デプロイツール（Wrangler）をCloudflare APIに対して認証するために使用されます。代表例はCLOUDFLARE_API_TOKENです 9。
アクセス方法: CI/CDのワークフローファイル（例：GitHub ActionsのYAMLファイル内のsecrets.CLOUDFLARE_API_TOKEN）から参照され、通常は環境変数としてWranglerに渡されます 10。
ユースケース: 自動化されたデプロイパイプラインには不可欠です。

4. ローカル開発用シークレット（.dev.vars）

スコープ: ローカルの開発者マシンのみ。
目的: wrangler devを使用したローカル開発中に、本番環境のシークレットや環境変数をシミュレートするために使用されます。このファイルは常に.gitignoreに追加し、バージョン管理から除外する必要があります 1。
アクセス方法: Wranglerが自動的にこのファイルを読み込み、変数はenvオブジェクト上で単純な文字列として利用可能になります。これは従来のWorkers Secretsの動作を模倣しています 1。
ユースケース: Secrets Storeを使用する際のローカル開発に必須です。なぜなら、本番環境のシークレットはセキュリティ上の理由からローカルからはアクセスできないように設計されているためです 8。
これらの4つのシステムは、開発からデプロイ、実行に至るまでの明確なワークフローを形成しています。開発者はローカルマシンで.dev.varsを使い、コードを記述・テストします。コードがリポジトリにプッシュされると、CI/CDパイプラインが起動し、GitHub Actions Secretsなどに保存されたCLOUDFLARE_API_TOKENを使ってWranglerを認証します。認証されたWranglerは、wrangler.tomlの指示に従い、アカウントレベルのSecrets Storeから本番用のシークレットをWorkerにバインドしてデプロイします。そして、デプロイされたWorkerは、実行時にget()メソッドを介してシークレットの値を取得します。この一連の流れを理解することが、混乱を解消し、各ツールを正しく使い分けるための鍵となります。

シークレット管理システムの概要比較

以下の表は、各システムの主な特徴をまとめたものです。これにより、それぞれの役割と違いが一目でわかります。
特徴
従来のWorkers Secrets
Cloudflare Secrets Store
CI/CD Secrets
ローカル用 .dev.vars
主なユースケース
単一Worker用のランタイムシークレット
複数サービスで共有する中央集権型ランタイムシークレット
デプロイツールの認証
ローカル開発でのシークレットのシミュレーション
スコープ
Workerごと
アカウント
CI/CDプラットフォーム
ローカルファイルシステム
管理インターフェース
wrangler secret CLI, Worker設定画面
wrangler secrets-store CLI, Secrets Store画面
GitHub/GitLab等のUI
テキストエディタ
Workerコードからのアクセス
同期（env.KEY）
非同期（await env.KEY.get()）
アクセス不可
同期（env.KEY）
セキュリティモデル
Workerデプロイ担当者の権限に依存
RBACロールによる詳細な権限管理
CI/CDプラットフォームのセキュリティ
ファイルシステム権限
推奨される使用場面
シンプルな自己完結型プロジェクト
複雑な共有型プロジェクト、職務分掌が必要な場合
すべての自動化パイプライン
Secrets Storeを利用するすべてのプロジェクトのローカル開発


III. Cloudflare Secrets Storeの実装：ステップバイステップガイド

このセクションでは、ユーザーが直面している実装上の問題を解決し、堅牢な基盤を確立するための、実践的で規範的なチュートリアルを提供します。一貫性を保つため、ユーザーの例であるGEMINI_API_KEYを元に進めます。

前提条件

作業を開始する前に、いくつかのアカウントレベルの要件を確認する必要があります。
Cloudflareアカウントのロール: シークレットを作成・管理するには、Super AdministratorまたはSecrets Store Adminのロールが必要です 8。これは後述するデプロイ用のロールとは異なる点に注意してください。
Wrangler CLI: 最新版のWranglerがインストールされ、wrangler loginコマンドでCloudflareアカウントに認証済みであること。

ステップ1：Secrets Storeでのシークレットの作成と管理

まず、中央集権的なストアにシークレットを作成します。これにはダッシュボードを使用する方法とWrangler CLIを使用する方法があります。

Cloudflareダッシュボード経由

Cloudflareダッシュボードにログインし、アカウントホームからSecrets Storeに移動します。
シークレットを作成を選択します。
シークレット名を入力します（例：GEMINI_API_KEY_PROD）。重要な注意点として、シークレット名にスペースを含めることはできません 8。
シークレットの値を入力します。この値は一度保存すると二度と表示できない「ライトオンリー」の特性を持つことを強調しておきます 3。
許可スコープとしてWorkersを選択します 8。
シークレットを保存した後、Secrets Storeのメインページに戻り、後で使用するためにストアIDをコピーしておきます。

Wrangler CLI経由

まだストアが存在しない場合は、最初にストアを作成します：wrangler secrets-store store create <your-store-name> --remote 3。
次に、シークレットを作成します：wrangler secrets-store secret create <STORE_ID> --name GEMINI_API_KEY_PROD --scopes workers 3。コマンドを実行すると、対話形式でシークレットの値の入力を求められます。

ステップ2：wrangler.tomlの決定版設定

ユーザーのwrangler.tomlファイルに見られた誤った構文を修正します。[[secrets]]ブロックは従来のWorkers Secrets用であり、Secrets Storeにはsecrets_store_secretsキーを使用するのが正解です。
以下に、各フィールドの説明を含む正しいTOML構造を示します 8。

Ini, TOML


# wrangler.toml

# これはCloudflare Secrets Storeの正しい設定です
secrets_store_secrets =


ここでbindingとsecret_nameの違いを理解することが極めて重要です。bindingはWorkerコード内でのローカルなエイリアス（別名）であり、secret_nameはSecrets Store内でのグローバルな識別子です。この分離により、柔軟な命名規則が可能になります。例えば、Workerコードは常にenv.GEMINI_API_KEYという一貫した名前でシークレットにアクセスしつつ、デプロイする環境に応じて、そのバインディングが指す実際のシークレットをGEMINI_API_KEY_STAGINGやGEMINI_API_KEY_PRODのように切り替えることができます。

ステップ3：Worker内でのシークレットへのアクセス

次に、本番環境のバインディングとローカル開発用の文字列の両方を堅牢に処理できる、正しいTypeScriptのコードパターンを示します。このパターンは、ユーザーの環境でgenerateFallbackSpellが呼ばれてしまう問題を直接解決します。

TypeScript


// src/index.ts

// envオブジェクトの型定義
export interface Env {
  // 本番環境ではSecrets Storeのバインディングオブジェクト
  // ローカル開発では.dev.varsからの文字列
  GEMINI_API_KEY: { get: () => Promise<string> } | string;
}

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    let geminiApiKey: string | undefined;

    // 両方の環境に対応する堅牢なチェック
    if (typeof env.GEMINI_API_KEY === 'object' && env.GEMINI_API_KEY!== null && 'get' in env.GEMINI_API_KEY) {
      // 本番/ステージング環境：Secrets Storeのバインディングオブジェクト
      console.log("Accessing secret from Cloudflare Secrets Store...");
      geminiApiKey = await env.GEMINI_API_KEY.get();
    } else if (typeof env.GEMINI_API_KEY === 'string') {
      // ローカル開発環境：.dev.varsからのプレーンな文字列
      console.log("Accessing secret from local.dev.vars file...");
      geminiApiKey = env.GEMINI_API_KEY;
    }

    if (!geminiApiKey) {
      // バインディングの設定ミスやローカル変数の欠落時にここが実行される
      // ユーザーのgenerateFallbackSpellが呼ばれる状況に相当
      return new Response("API Key not configured.", { status: 500 });
    }

    // APIキーを使用する
    const response = await fetch("https://api.example.com/data", {
      headers: { "Authorization": `Bearer ${geminiApiKey}` }
    });

    return response;
  }
}



ステップ4：ローカル開発ワークフロー

本番環境のシークレットにはローカルからアクセスできません 8。これはバグではなく、意図されたセキュリティ機能です。ローカル開発では、これらのシークレットをシミュレートするために
.dev.varsファイルを使用します。
プロジェクトのルートディレクトリに.dev.varsという名前のファイルを作成します。
このファイルに、wrangler.tomlのbinding名と一致するキーで、ローカル用の値を設定します。
重要：.dev.varsファイルは機密情報を含むため、必ず.gitignoreファイルに追加して、バージョン管理システムにコミットされないようにしてください 11。
.dev.varsファイルの内容：



#.dev.vars - ローカル開発専用。このファイルは.gitignoreに追加してください！
GEMINI_API_KEY="your-local-development-api-key-value"


この設定により、wrangler devコマンドを実行すると、Wranglerはこのファイルを自動的に読み込み、env.GEMINI_API_KEYを単純な文字列としてWorkerに提供します。その結果、ステップ3で示したコードのelse ifブロックが正しく実行され、ローカルでの開発が可能になります。

IV. CI/CD認証エラーのトラブルシューティング（エラー10021）

ユーザーが直面しているデプロイ時のブロッカーである認証エラーは、Secrets Storeの導入における最も一般的なつまずきの一つです。このセクションでは、エラーの根本原因を詳細に分析し、解決策を具体的に示します。

エラーの分析

まず、エラーメッセージを正確に把握します。
✘ A request to the Cloudflare API (...) failed. failed to fetch secrets store binding due to authorization error - check deploy permissions and secret scopes [code: 10021] 13。
このエラーはWorkerの実行時ではなく、wrangler deployコマンドの実行中、つまりデプロイプロセス中に発生します。これは、CI/CDランナーがCloudflare APIと対話する際の権限が不十分であることを示しています。

根本原因の解析

エラー10021が発生するまでのデプロイプロセスを分解すると、失敗の核心が見えてきます。
認証: CI/CDランナー（例：GitHub Actions）は、提供されたCLOUDFLARE_API_TOKENを使用してCloudflare APIに認証要求を送ります。
Workerスクリプトのアップロード: WranglerはWorkerのスクリプトをアップロードまたは更新しようとします。このステップが成功する場合、APIトークンには基本的なWorkerの編集権限（例：Workers Scripts: Edit）があることを意味します。
バインディングの検出: Wranglerはwrangler.tomlファイルを解析し、secrets_store_secretsブロックを発見します。これにより、WorkerがSecrets Storeのリソースに依存していることを認識します。
失敗点（FAILURE POINT）: Workerにシークレットをバインドするために、WranglerはCloudflare APIに対し、指定されたstore_idとsecret_nameが存在し、有効であるかを確認するための読み取り操作をSecrets Storeに対して実行しようとします。しかし、APIトークンがこのサービス間連携（WorkerサービスからSecrets Storeサービスへの問い合わせ）に必要な権限を持っていない場合、APIはこの特定のサブリクエストを拒否します。その結果、デプロイ全体が失敗し、エラーコード10021が返されます。
つまり、このエラーは「Workerをデプロイする権限」だけでなく、「デプロイプロセス中に依存リソースのメタデータを読み取る権限」が不足していることが原因です。

解決策：CI/CD用APIトークンの正しい設定

この問題を解決するには、CI/CDパイプラインで使用するAPIトークンに適切な権限を付与する必要があります。最小権限の原則に従い、必要以上の権限を与えないことがセキュリティのベストプラクティスです。Cloudflareが提供する「Edit Cloudflare Workers」テンプレートは、Secrets Storeとの連携には不十分です。

正しいAPIトークンの作成手順

Cloudflareダッシュボードで、マイプロフィール > APIトークン > トークンを作成するに移動します。
カスタムトークンを作成するを選択します。
トークンにわかりやすい名前を付けます（例：CI-CD-Worker-Deployer）。
以下の権限を正確に設定します。
権限1（Workerスクリプトのデプロイ用）:
許可： アカウント
リソース： Workersスクリプト
レベル： 編集
権限2（バインディングのためのシークレットメタデータ読み取り用）:
許可： アカウント
リソース： Account Secrets Store
レベル： 読み取り
アカウントリソースセクションで、トークンのスコープをWorkerが存在する特定のアカウントに限定します。
トークンを作成し、生成された値をコピーします。この値をCI/CDプロバイダー（例：GitHub Actions Secrets）のCLOUDFLARE_API_TOKENとして設定し直します。
このカスタムトークンを使用することで、CI/CDプロセスはWorkerのコードをデプロイする権限と、Secrets Storeのシークレットを安全にバインドするために必要なメタデータを読み取る権限の両方を持つことになり、エラー10021は解決されます。

Secrets Store操作に必要なロール

人間のユーザーがダッシュボードで操作する場合のロールを理解することは、APIトークンの権限設定の背景を把握する助けになります。

ロール
シークレットの作成/編集/削除
シークレットメタデータの表示
Workerへのバインド
Super Administrator
✓
✓
✓
Secrets Store Admin
✓
✓
✗
Secrets Store Deployer
✗
✓
✓
Secrets Store Reporter
✗
✓
✗
出典: 3










CI/CD用APIトークンの権限チェックリスト

CI/CD用のAPIトークンを作成する際の、明確な権限設定のチェックリストです。
タスク
必要な権限
スコープ
Workerコードのデプロイ/更新
Workers Scripts: Edit
アカウント
Secrets Storeバインディング
Account Secrets Store: Read
アカウント
（任意）KVバインディング
Workers KV Storage: Read
アカウント
（任意）デプロイ時のキャッシュパージ
Cache Purge: Purge
ゾーン


V. 高度な設定と戦略的ベストプラクティス

基本的な実装とトラブルシューティングを超えて、Secrets Storeをより効果的に活用するためには、高度な設定や戦略的なベストプラクティスを理解することが不可欠です。このセクションでは、アプリケーションを単なる「機能するもの」から「堅牢で、スケーラブルで、セキュアなもの」へと昇華させるための知識を提供します。

複数環境の管理（ステージング vs. 本番）

ステージング環境と本番環境で異なるAPIキーや設定を使用することは、現代のソフトウェア開発における標準的なプラクティスです。wrangler.tomlの環境（Environments）機能を利用することで、これをエレガントに実現できます。これはドキュメントが少ない領域であり、多くの開発者がつまずくポイントです 15。
wrangler.tomlは継承モデルを採用しており、トップレベルで定義された設定がデフォルト値となり、[env.name]ブロックで定義された設定がその環境に特化して上書きされます。Secrets Storeのバインディングもこのモデルに従います。
以下は、ステージング環境と本番環境で異なるシークレットを使用するための、完全なwrangler.tomlの設定例です。

Ini, TOML


# wrangler.toml

name = "my-gemini-worker"
main = "./src/index.ts"
compatibility_date = "2024-05-01"

# --- ステージング環境の設定 ---
[env.staging]
# `binding`名は同じだが、`secret_name`でステージング用のシークレットを指定
secrets_store_secrets =
[env.staging.vars]
ENVIRONMENT = "staging"

# --- 本番環境の設定 ---
[env.production]
# こちらでは本番用のシークレットを指定
secrets_store_secrets =
[env.production.vars]
ENVIRONMENT = "production"


この設定ファイルを使用すると、デプロイコマンドで環境を切り替えることができます。
ステージング環境へのデプロイ: wrangler deploy --env staging
本番環境へのデプロイ: wrangler deploy --env production
これにより、Workerコードは常にenv.GEMINI_API_KEYを参照するだけでよく、Wranglerがデプロイ時に適切なバックエンドのシークレットに自動的にバインドしてくれます。

セキュリティアーキテクチャと考慮事項


暗号化モデル

Secrets Storeに保存されたシークレットは、単にデータベースに格納されているわけではありません。Cloudflareは、保存データ（at-rest）のセキュリティを確保するために、堅牢な多層暗号化アプローチを採用しています 3。
この仕組みは、**KEK（Key Encryption Key）とDEK（Data Encryption Key）**の階層に基づいています 3。これを簡単に説明すると、「マスターキー（KEK）がデータキー（DEK）のセットを暗号化し、あなたのシークレットはそのデータキーによって暗号化される」という構造です。これにより、データを直接暗号化するキー（DEK）は頻繁に更新され、万が一漏洩した際の影響範囲が限定的になります。この設計は、プラットフォームのセキュリティに対する信頼性を高めるものです。

シークレットのローテーション

シークレットを定期的にローテーション（更新）することは、漏洩したキーが悪用される時間的猶予を制限するための、極めて重要なセキュリティ対策です 2。Secrets Storeにはまだ自動ローテーション機能はありませんが、手動で安全にローテーションを実施するためのワークフローを確立することができます。
新しいシークレットの作成: Secrets Storeに新しいバージョンのシークレットを作成します（例：GEMINI_API_KEY_PROD_V2）。
バインディングの更新: wrangler.tomlのsecret_nameを新しいシークレットを指すように更新し、Workerを再デプロイします。
猶予期間: すべてのWorkerインスタンスが新しいシークレットを確実に使用し始めるまで、一定期間待ちます。CloudflareのTurnstileのキーローテーション機能では、古いキーと新しいキーが一定期間共存できる仕組みが採用されており、これを参考にすることができます 19。
古いシークレットの廃止: 新しいシークレットが安定して使用されていることを確認した後、古いシークレット（GEMINI_API_KEY_PROD）をSecrets Storeから削除します。

命名規則

複数の環境やサービスでシークレットを管理する場合、一貫性のある命名規則は混乱を避け、保守性を高めるために不可欠です 21。
binding名: Workerコード内で使用するbinding名は、環境を問わず一貫させます（例：API_KEY）。
secret_name: Secrets Store内で管理するsecret_nameは、サービス名、環境、バージョンなどを含む、説明的な名前にします（例：PAYMENT_SERVICE_STRIPE_KEY_PROD、PAYMENT_SERVICE_STRIPE_KEY_STAGING）。

ベータ版の制限事項の理解

Secrets Storeは現在オープンベータ版であり、本番環境での利用にはそのリスクと制限を十分に理解する必要があります。
SLA（サービス品質保証）なし: ベータ版のサービスは、Cloudflareの標準的なSLAの対象外です。これは、アップタイムやサポートの応答時間に関する保証がないことを意味します 24。
ハードリミット: 現在、以下の制限が文書化されています。
アカウントごとに最大100個のシークレット（無料およびPay-as-you-goプラン） 27。
アカウントごとに1つのシークレットストアのみ 27。
シークレットの値は最大1024バイト。これは、PEM形式の証明書やJWKのような大きなキーを扱うユーザーにとっては、既知の課題となっています 27。
ロードマップと将来性: Cloudflareは、Secrets StoreをAI GatewayやWAFなど他の製品にも統合し、将来的には個々のシークレットだけでなくストア全体にバインドする機能を追加する計画があることを示唆しています 3。これは、サービスが積極的に開発されていることを示しており、将来的な機能拡張が期待されます。

VI. 結論と戦略的推奨事項

本レポートでは、Cloudflare Workersにおける現代的なシークレット管理、特に新しいCloudflare Secrets Storeの導入に関する包括的な分析と実践的なガイダンスを提供しました。実装の混乱からCI/CDの認証エラーまで、ユーザーが直面する具体的な課題を解決するための明確な手順を示しました。

主要な要点のまとめ

概念の明確化: 従来のWorkers Secrets、Cloudflare Secrets Store、CI/CD Secrets、ローカル用.dev.varsは、それぞれ開発ライフサイクルの異なる場面で特定の役割を担う、補完的なツールです。この区別を理解することが、すべての基本となります。
正しい実装パターン: Secrets Storeを利用する際は、wrangler.tomlでsecrets_store_secretsブロックを使用し、Workerコード内ではawait env.BINDING_NAME.get()による非同期アクセスが必要です。ローカル開発では.dev.varsによるシミュレーションが必須です。
CI/CDの権限: エラーコード10021は、APIトークンにWorkers Scripts: Edit権限に加えて、Account Secrets Store: Read権限が不足していることが原因です。最小権限の原則に従ったカスタムトークンを作成することが、セキュアな解決策です。
複数環境の管理: wrangler.tomlの[env.name]ブロックを活用することで、同じbinding名を維持しつつ、ステージング環境と本番環境で異なるバックエンドのシークレットにバインドすることが可能です。

最終的な推奨フレームワーク

今後のプロジェクトでどのシークレット管理戦略を選択すべきか、以下のフレームワークを意思決定のツールとして活用することを推奨します。

シークレット管理戦略の選択

プロジェクト要件
推奨アプローチ
根拠
共有シークレットがない、単一のシンプルなWorker
従来のWorkers Secrets (wrangler secret put)
自己完結型プロジェクトにとって最も迅速かつシンプルな方法。アカウントレベルの複雑さを導入する必要がない。
複数のWorkerが同じAPIキーを共有する
Cloudflare Secrets Store
「Single Source of Truth（信頼できる唯一の情報源）」を実現し、キーローテーションを簡素化する。スケーラブルなアーキテクチャへの備えとなる。
職務分掌が厳格な組織（例：セキュリティ運用 vs. 開発）
Cloudflare Secrets Store
RBACが不可欠。開発者がシークレットの値にアクセスすることなく、セキュリティ運用チームがシークレットを管理できる。また、開発者はシークレット管理権限なしでデプロイ可能。
機密性が非常に高く、ベータ版のサービス保証では不十分なプロジェクト
従来のWorkers Secrets（当面）
従来のシークレットはGA（一般提供）機能であり、標準的なプラットフォームの安定性の対象となる。Secrets StoreがGAとなり、SLAが定義された時点で移行を再評価する。


結びの言葉

Cloudflare Secrets Storeの採用は、単なる技術的な更新ではなく、Cloudflare上でのサーバーレスアーキテクチャをよりセキュアでスケーラブルなものにするための戦略的な投資です。従来のPer-Workerモデルが抱えていた課題を解決し、エンタープライズレベルの管理機能を提供するこの新しいベストプラクティスを、今後のすべての適切なプロジェクトで積極的に採用することが、長期的な成功への鍵となるでしょう。
引用文献
Secrets - Workers - Cloudflare Docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/workers/configuration/secrets/
What is a Cloudflare Secret? - Pulumi, 7月 9, 2025にアクセス、 https://www.pulumi.com/what-is/what-is-a-cloudflare-secret/
Introducing Cloudflare Secrets Store (Beta): secure your secrets, simplify your workflow, 7月 9, 2025にアクセス、 https://blog.cloudflare.com/secrets-store-beta/
Cloudflare Launches Public Beta of Secrets Store for Secure Credential Management, 7月 9, 2025にアクセス、 https://www.infoq.com/news/2025/04/cloudflare-secrets-store-beta/
Announcing Cloudflare Secrets Store, 7月 9, 2025にアクセス、 https://blog.cloudflare.com/secrets-store/
Overview · Secrets Store docs - Cloudflare Docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/secrets-store/
wrangler secret - Fig.io, 7月 9, 2025にアクセス、 https://fig.io/manual/wrangler/secret
Use Secrets Store with Workers - Cloudflare Docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/secrets-store/integrations/workers/
GitLab CI/CD · Cloudflare Workers docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/workers/ci-cd/external-cicd/gitlab-cicd/
wrangler-action/README.md at main - GitHub, 7月 9, 2025にアクセス、 https://github.com/cloudflare/wrangler-action/blob/master/README.md
Environment variables and secrets - Workers - Cloudflare Docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/workers/development-testing/environment-variables/
Secrets Store access control · Secrets Store docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/secrets-store/access-control/
failed to fetch secrets store binding due to authorization error - Cloudflare Developers, 7月 9, 2025にアクセス、 https://www.answeroverflow.com/m/1384124221919330314
Secrets store bindings unavailable in github action · Issue #8964 ..., 7月 9, 2025にアクセス、 https://github.com/cloudflare/workers-sdk/issues/8964
Workers with Secrets Store Secrets - Production Config - Cloudflare Developers, 7月 9, 2025にアクセス、 https://www.answeroverflow.com/m/1384653138031677603
Environment variable differences with local dev · Issue #845 · cloudflare/workers-sdk, 7月 9, 2025にアクセス、 https://github.com/cloudflare/workers-sdk/issues/845
envs in new wrangler/worker - CloudFlare - Reddit, 7月 9, 2025にアクセス、 https://www.reddit.com/r/CloudFlare/comments/1ep1865/envs_in_new_wranglerworker/
What is secrets management? - Cloudflare, 7月 9, 2025にアクセス、 https://www.cloudflare.com/learning/security/glossary/secrets-management/
Rotate Secret for a Turnstile Widget - Cloudflare API, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/api/resources/turnstile/subresources/widgets/methods/rotate_secret/
Rotate secret key - Turnstile - Cloudflare Docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/turnstile/troubleshooting/rotate-secret-key/
Service bindings - Runtime APIs · Cloudflare Workers docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/workers/runtime-apis/bindings/service-bindings/
Bindings (env) - Workers - Cloudflare Docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/workers/runtime-apis/bindings/
The Ultimate Guide to Cloudflare Workers | by Caleb Rocca - Medium, 7月 9, 2025にアクセス、 https://medium.com/@calebrocca/the-ultimate-guide-to-cloudflare-workers-edge-computing-made-easy-da2469af7bc0
ENTERPRISE SUBSCRIPTION TERMS OF SERVICE | Cloudflare, 7月 9, 2025にアクセス、 https://www.cloudflare.com/enterpriseterms/
Business Service Level Agreement - Cloudflare, 7月 9, 2025にアクセス、 https://www.cloudflare.com/business-sla/
Cloudflare has NO SLA FOR SUPPORT for anything but Enterprise accounts - Reddit, 7月 9, 2025にアクセス、 https://www.reddit.com/r/CloudFlare/comments/1ibbolu/cloudflare_has_no_sla_for_support_for_anything/
Manage account secrets · Secrets Store docs - Cloudflare Docs, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/secrets-store/manage-secrets/
Increased limits for Cloudflare for SaaS and Secrets Store free and pay-as-you-go plans, 7月 9, 2025にアクセス、 https://developers.cloudflare.com/changelog/2025-05-19-paygo-updates/
Request: Increase character limit on Secret Store - Cloudflare Community, 7月 9, 2025にアクセス、 https://community.cloudflare.com/t/request-increase-character-limit-on-secret-store/813995
Increase secrets-store max value length from 1024 to 2048 characters · Issue #9707 · cloudflare/workers-sdk - GitHub, 7月 9, 2025にアクセス、 https://github.com/cloudflare/workers-sdk/issues/9707
