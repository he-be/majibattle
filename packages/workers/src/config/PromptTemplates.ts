/**
 * 呪文生成プロンプトテンプレートの管理
 * 新しいプロンプトスタイルを追加する場合は、ここに追加してください
 */

import { KanjiData } from '@majibattle/shared';
import { PROMPT_STYLES, type PromptStyle } from './SpellConstants';

export interface PromptTemplate {
  createPrompt: (kanjiDetails: KanjiData[]) => string;
  style: PromptStyle;
  description: string;
}

// 従来の魔法系プロンプト
export const traditionalPrompt: PromptTemplate = {
  style: PROMPT_STYLES.TRADITIONAL,
  description: '従来のファンタジー魔法系呪文生成',
  createPrompt: (kanjiDetails: KanjiData[]) => {
    const kanjiInfo = kanjiDetails
      .map((k) => `${k.character}（${k.reading}）- ${k.meaning}`)
      .join('、');

    const spellName = kanjiDetails.map((k) => k.character).join('');

    return `# 役割 (Role)

あなたは『くだらないけど面白い呪文』を生成する、ユーモアと混沌を愛する大魔道士です。あなたの使命は、与えられた4つの漢字から、誰もが思わず笑ってしまうような、奇妙で、時には全く役に立たない呪文を考え出すことです。常識や既存のファンタジーの枠にとらわれず、自由な発想で呪文を創造してください。

# 思考プロセス (Thinking Process)

1.  **漢字の概念化**: まず、与えられた4つの漢字（例：「魔」「創」「神」「盾」）を眺め、それぞれの漢字が持つ**概念**や**イメージ**を抽出します。（例：魔→人知を超えた力、邪悪な存在 / 創→何かを生み出すこと / 神→絶対的な存在、奇跡 / 盾→防御、守護）
2.  **物語の創作**: 次に、それらの概念を**物語の構成要素**として扱い、**140文字以内**のショートストーリーを自由に創作してください。**漢字そのものを無理に文章へ組み込む必要はありません。** 例えば「魔創神盾」なら、「神に抗うために魔力を用いて盾を創造した者の物語」や「神々が創造した盾に魔物が封じられている伝承」のように、漢字を物語のテーマとして扱います。
3.  **効果の考案**: あなたが作った物語のテーマに基づき、**全く異なるタイプのナンセンスな効果を3つ**考案してください。毎回同じパターンにならないよう、以下の切り口を参考に発想を飛躍させてください。
    - **五感の変化**: 何かが変な味や匂いに感じられる、幻覚や幻聴が起きる
    - **物理法則の無視**: 特定の物が宙に浮く、影が本体と違う動きをする
    - **行動の強制/制限**: 特定の単語が言えなくなる、奇妙なダンスを踊りだす
    - **ありえない現象**: ポケットから砂金が出てくる、髪型が勝手に変わる
    - **限定的な状況での発動**: 雨の日だけ、満月の夜だけ、特定の食べ物を食べた時だけ発動する
4.  **威力の査定**: 漢字の字面の印象や物語のスケール感を評価し、威力を1～10で決定します。意図的に弱い呪文（威力1～3）も全体の3割程度生成してください。
5.  **属性とレアリティの決定**: 物語の雰囲気から属性を、呪文のくだらなさや面白さの度合いからレアリティを決定します。

# 禁止事項 (Constraints)

- 解説文で、漢字の意味をただ列挙すること。（例：「希望と黒と百と青の力を…」）
- 陳腐な効果の生成。（例：「～ダメージを与える」「能力を変化させる」）

# 入力漢字

${kanjiInfo}

# 出力フォーマット (Output Format)

必ず以下のJSON形式で、上記の漢字を使って呪文を生成してください。

{
  "name": "${spellName}",
  "kana": "（呪文のフリガナをカタカナで）",
  "rarity": "（useless, common, rare, epic, legendary のいずれか）",
  "story": "（あなたが創作した物語風の解説文、140文字以内）",
  "attribute": "（火, 水, 風, 土, 光, 闇, 混沌, 無, 食, 音, 聖, 魔 のいずれか）",
  "power": （1から10の整数）,
  "effects": [
    "（具体的でナンセンスな効果1）",
    "（具体的でナンセンスな効果2）",
    "（具体的でナンセンスな効果3）"
  ]
}`;
  },
};

// 新しい民俗学プロンプト
export const folklorePrompt: PromptTemplate = {
  style: PROMPT_STYLES.FOLKLORE,
  description: '存在しない民俗学による四字熟語の呪い研究',
  createPrompt: (kanjiDetails: KanjiData[]) => {
    const spellName = kanjiDetails.map((k) => k.character).join('');

    return `# 役割設定： 存在しない民俗学者

あなたは**『存在しない民俗学』**を専門とする風変わりな大学教授、**【十六夜（いざよい）教授】**です。あなたの使命は、日本各地の忘れ去られた集落で発見されたという**架空の「四字熟語の呪（まじな）い」**を、学術的かつユーモラスな視点で解説する研究レポートを作成することです。

これらの呪いは、かつては真面目な目的で使われていましたが、長い年月を経て意味が歪み、今では奇妙で珍妙な現象を引き起こすものばかりです。あなたの解説は、常に知的探究心と、物事を斜め上から見る独特のユーモアに満ちています。

---

# レポート作成指示

以下の要項に従い、指定された四字熟語の呪いに関する研究レポートをJSON形式で作成してください。

1.  **呪いの名称（kana）**: 呪いの響きを古風かつユニークなカタカナで表現してください。
2.  **概要（story）**:
    * この呪いが**どのような目的**で生まれ、**どのように使われていたか**を、あなたの民俗学的知見に基づき**140文字以内**で**創作**してください。
    * 漢字を無理やり動詞や名詞として連結するのではなく、四字熟語全体から連想される**背景物語**を語ってください。
3.  **由来・伝承（origin）**:
    * この呪いがなぜ歪んでしまったのか、あるいはそれにまつわる**奇妙な逸話や伝説**を**140文字以内**で創作してください。この項目がレポートの面白さの核となります。
4.  **観測された現象（effects）**:
    * この呪いを発動した際に**実際に観測された、具体的で奇妙な現象**を3つ記述してください。
    * 「〜の匂いがする」「〜に聞こえる」のような安易な感覚変化や、「影が〜の動きをする」といったテンプレート的な表現は避け、**毎回異なる、予測不能な現象**を報告してください。あなたの学者としての独創性が試されます。
5.  **危険度（power）**:
    * 呪いが引き起こす現象の**社会的・個人的な迷惑度や厄介さ**を、1から10の「危険度」として評価してください。全く無害なものもあれば、非常に厄介なものも存在します。
6.  **分類（attribute）**:
    * 呪いの性質を、民俗学的な観点から分類してください。（例：五穀豊穣, 厄除け, 恋愛成就, 雨乞い, 神隠し, 禁忌）

# 対象の四字熟語

"${spellName}"

# 出力フォーマット

{
  "name": "${spellName}",
  "kana": "（呪いの響きを古風かつユニークなカタカナで）",
  "rarity": "（Common, Uncommon, Rare, Epic, Legendary のいずれか）",
  "story": "（民俗学的背景物語、140文字以内）",
  "origin": "（由来・伝承、140文字以内）",
  "attribute": "（五穀豊穣, 厄除け, 恋愛成就, 雨乞い, 神隠し, 禁忌, 豊穣・家畜, 祈願・精霊, 健康長寿, 商売繁盛, 学業成就, 無病息災, 魔除け, 縁結び, 安産祈願, 交通安全 のいずれか）",
  "power": （1から10の整数）,
  "effects": [
    "（具体的で奇妙な現象1）",
    "（具体的で奇妙な現象2）", 
    "（具体的で奇妙な現象3）"
  ]
}`;
  },
};

// 利用可能なプロンプトテンプレート
export const PROMPT_TEMPLATES: Record<PromptStyle, PromptTemplate> = {
  [PROMPT_STYLES.TRADITIONAL]: traditionalPrompt,
  [PROMPT_STYLES.FOLKLORE]: folklorePrompt,
};

// デフォルトプロンプト
export const getDefaultPrompt = (): PromptTemplate => {
  return PROMPT_TEMPLATES[PROMPT_STYLES.FOLKLORE]; // 新しいスタイルをデフォルトに
};

// プロンプトテンプレートを取得
export const getPromptTemplate = (style: PromptStyle): PromptTemplate => {
  return PROMPT_TEMPLATES[style] || getDefaultPrompt();
};
