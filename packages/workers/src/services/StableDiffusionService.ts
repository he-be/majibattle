/**
 * Stable Diffusion API連携サービス
 * Cloudflare Tunnel経由でホームサーバーのStable Diffusion WebUIと通信
 */

import { ImagePrompt } from './ImagePromptGenerationService';

export interface GeneratedImage {
  imageUrl: string;
  prompt: string;
  seed: number;
  generationTime: number;
}

export interface StableDiffusionResponse {
  images: string[]; // Base64エンコードされた画像データ
  parameters: {
    seed: number;
    prompt: string;
    negative_prompt: string;
    width: number;
    height: number;
    steps: number;
    cfg_scale: number;
  };
  info: string;
}

export class StableDiffusionService {
  private apiEndpoint: string;
  private cfClientId?: string;
  private cfSecret?: string;

  constructor(apiEndpoint: string, cfClientId?: string, cfSecret?: string) {
    this.apiEndpoint = apiEndpoint;
    this.cfClientId = cfClientId;
    this.cfSecret = cfSecret;
  }

  /**
   * 画像を生成
   */
  async generateImage(imagePrompt: ImagePrompt): Promise<GeneratedImage> {
    const startTime = Date.now();

    try {
      console.log('🎨 Starting image generation...');
      console.log('Prompt:', imagePrompt.prompt);
      console.log('Negative:', imagePrompt.negativePrompt);

      const response = await this.callStableDiffusionAPI(imagePrompt);

      if (!response.images || response.images.length === 0) {
        throw new Error('No images generated by Stable Diffusion API');
      }

      // Base64画像をBlobに変換してURLを生成
      const imageBase64 = response.images[0];
      const imageUrl = await this.convertBase64ToDataUrl(imageBase64);

      const generationTime = Date.now() - startTime;

      console.log('✅ Image generation completed in', generationTime, 'ms');

      return {
        imageUrl,
        prompt: response.parameters.prompt,
        seed: response.parameters.seed,
        generationTime,
      };
    } catch (error) {
      console.error('❌ Image generation failed:', error);
      throw new Error(
        `Image generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      );
    }
  }

  /**
   * Stable Diffusion WebUI APIを呼び出し
   */
  private async callStableDiffusionAPI(imagePrompt: ImagePrompt): Promise<StableDiffusionResponse> {
    // SDXL固定設定を使用したリクエストボディ
    const requestBody = {
      prompt: imagePrompt.prompt,
      negative_prompt: imagePrompt.negativePrompt,
      width: imagePrompt.width,
      height: imagePrompt.height,
      steps: imagePrompt.steps,
      cfg_scale: imagePrompt.cfgScale,
      seed: imagePrompt.seed,
      sampler_name: imagePrompt.samplerName,
      restore_faces: false,
      tiling: false,
      do_not_save_samples: true,
      do_not_save_grid: true,
      n_iter: 1,
      batch_size: 1,
      eta: 0,
      denoising_strength: 0.75,
      s_min_uncond: 0,
      s_churn: 0,
      s_tmax: 0,
      s_tmin: 0,
      s_noise: 1,
      override_settings: imagePrompt.checkpoint
        ? {
            sd_model_checkpoint: imagePrompt.checkpoint,
          }
        : {},
      override_settings_restore_afterwards: true,
      script_args: [],
      script_name: null,
      send_images: true,
      save_images: false,
      alwayson_scripts: {},
    };

    console.log('🌐 Calling Stable Diffusion API:', this.apiEndpoint);

    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      Accept: 'application/json',
    };

    // Cloudflare Service Auth用のヘッダー追加
    if (this.cfClientId && this.cfSecret) {
      headers['CF-Access-Client-Id'] = this.cfClientId;
      headers['CF-Access-Client-Secret'] = this.cfSecret;
    }

    const response = await fetch(`${this.apiEndpoint}/sdapi/v1/txt2img`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Stable Diffusion API Error:', {
        status: response.status,
        statusText: response.statusText,
        body: errorText,
      });
      throw new Error(`Stable Diffusion API error: ${response.status} ${response.statusText}`);
    }

    const result = (await response.json()) as StableDiffusionResponse;

    // レスポンスの妥当性チェック
    if (!result.images || !Array.isArray(result.images)) {
      console.error('❌ Invalid API response:', result);
      throw new Error('Invalid response from Stable Diffusion API');
    }

    return result;
  }

  /**
   * Base64文字列をData URLに変換
   */
  private async convertBase64ToDataUrl(base64: string): Promise<string> {
    try {
      // Base64データにMIMEタイプを追加してData URLを作成
      return `data:image/png;base64,${base64}`;
    } catch (error) {
      console.error('❌ Failed to convert base64 to data URL:', error);
      throw new Error('Failed to process generated image');
    }
  }

  /**
   * API接続テスト
   */
  async testConnection(): Promise<boolean> {
    try {
      console.log('🔍 Testing Stable Diffusion API connection...');

      const headers: Record<string, string> = {
        Accept: 'application/json',
      };

      if (this.cfClientId && this.cfSecret) {
        headers['CF-Access-Client-Id'] = this.cfClientId;
        headers['CF-Access-Client-Secret'] = this.cfSecret;
      }

      // WebUI APIのオプション情報を取得してテスト
      const response = await fetch(`${this.apiEndpoint}/sdapi/v1/options`, {
        method: 'GET',
        headers,
      });

      if (response.ok) {
        console.log('✅ Stable Diffusion API connection successful');
        return true;
      } else {
        console.error(
          '❌ Stable Diffusion API connection failed:',
          response.status,
          response.statusText
        );
        return false;
      }
    } catch (error) {
      console.error('❌ Stable Diffusion API connection test failed:', error);
      return false;
    }
  }

  /**
   * 利用可能なサンプラー一覧を取得
   */
  async getSamplers(): Promise<string[]> {
    try {
      const headers: Record<string, string> = {
        Accept: 'application/json',
      };

      if (this.cfClientId && this.cfSecret) {
        headers['CF-Access-Client-Id'] = this.cfClientId;
        headers['CF-Access-Client-Secret'] = this.cfSecret;
      }

      const response = await fetch(`${this.apiEndpoint}/sdapi/v1/samplers`, {
        method: 'GET',
        headers,
      });

      if (response.ok) {
        const samplers = (await response.json()) as Array<{ name: string }>;
        return samplers.map((s) => s.name);
      } else {
        console.warn('⚠️ Failed to fetch samplers, using default list');
        return ['Euler', 'Euler a', 'DPM++ 2M', 'DPM++ SDE'];
      }
    } catch (error) {
      console.warn('⚠️ Failed to fetch samplers:', error);
      return ['Euler', 'Euler a', 'DPM++ 2M', 'DPM++ SDE'];
    }
  }
}
